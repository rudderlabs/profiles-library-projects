# This is a sample file, for detailed reference see: https://rudderlabs.github.io/pywht/
models:
  - name: stripe_id_stitcher
    model_type: id_stitcher
    model_spec:
      validity_time: 24h
      entity_key: user
      main_id_type: main_id
      edge_sources:
        - inputs/stripeCustomers
        - inputs/stripeCharges
        - inputs/stripeInvoices
        - inputs/stripeBalanceHistory
        - inputs/stripeSubscriptions
        - inputs/stripeRefunds
        - inputs/stripeInvoicesView
# Remove the section below, if you don't want to generate a feature table
  - name: stripe_features
    model_type: feature_table_model
    model_spec:
      validity_time: 24h
      id_stitching: models/stripe_id_stitcher
      macros:
        - name: macro_datediff
          inputs: 
            - timestamp_col
          value: datediff(day, date({{timestamp_col}}), to_timestamp_tz(replace('{{timestamp}}',' UTC')))
      features:

# shipping_address_country 
        - tablevar:
            name: shipping_address_country_ts
            ref: inputs/stripeCharges
            filter: currency is not null and currency != ''
            value: max(created)
        - tablefeature:
            name: shipping_address_country
            ref: inputs/stripeCharges
            filter: created = shipping_address_country_ts
            value: max(billing_details_address_country)

# shipping_address_state
        - tablevar:
            name: shipping_address_state_ts
            ref: inputs/stripeCharges
            filter: currency is not null and currency != ''
            value: max(created)
        - tablefeature:
            name: shipping_address_state
            ref: inputs/stripeCharges
            filter: created = shipping_address_state_ts
            value: max(billing_details_address_state)

# customer_currency
        - tablevar:
            name: customer_currency_ts
            ref: inputs/stripeCharges
            filter: currency is not null and currency != ''
            value: max(created)
        - tablefeature:
            name: customer_currency
            ref: inputs/stripeCharges
            filter: created = customer_currency_ts
            value: max(currency)

# payment_method_details_card_network
        - tablevar:
            name: payment_method_details_card_network_ts
            ref: inputs/stripeCharges
            filter: currency is not null and currency != ''
            value: max(created)
        - tablefeature:
            name: payment_method_details_card_network
            ref: inputs/stripeCharges
            filter: created = payment_method_details_card_network_ts
            value: max(payment_method_details_card_network)

# is_delinquent          
        - tablefeature:
            name: is_delinquent
            ref: inputs/stripeCustomers
            value: max(delinquent)

# has_credit_card
        - tablefeature:
            name: has_credit_card
            ref: inputs/stripeCharges
            value: max(case when (payment_method_details_card_funding = 'credit' and status = 'succeeded') then 1 else 0 end)

# days_since_first_sale          
        - tablevar: 
            name: first_sale_time
            ref: inputs/stripeCharges
            filter: status = 'succeeded'
            value: min(created)
        - feature:
            name: days_since_first_sale
            value: "{{ macro_datediff('first_sale_time') }}"

# days_since_last_purchase          
        - tablevar: 
            name: last_purchase_time
            ref: inputs/stripeCharges
            filter: status = 'succeeded'
            value: max(created)
        - feature:
            name: days_since_last_purchase
            value: "{{ macro_datediff('last_purchase_time') }}"
        
# total_sales
        - tablefeature: 
            name: total_sales
            ref: inputs/stripeBalanceHistory
            filter: type = 'charge'
            value: sum(amount)

# total_refunds
        - tablefeature: 
            name: total_refunds
            ref: inputs/stripeBalanceHistory
            filter: type = 'refund'
            value: sum(amount)

# total_fees
        - tablefeature: 
            name: total_fees
            ref: inputs/stripeBalanceHistory
            value: sum(fee)

# total_amt_spent
        - tablefeature: 
            name: total_amt_spent
            ref: inputs/stripeBalanceHistory
            value: sum(amount)

# total_net_transaction_amount
        - tablefeature: 
            name: total_net_transaction_amount
            ref: inputs/stripeBalanceHistory
            value: sum(net)

# average_transaction_value
        - tablefeature: 
            name: average_transaction_value
            ref: inputs/stripeBalanceHistory
            value: avg(amount)

# highest_transaction_value
        - tablefeature: 
            name: highest_transaction_value
            ref: inputs/stripeBalanceHistory
            value: max(amount)

# total_transactions
        - tablefeature: 
            name: total_transactions
            ref: inputs/stripeBalanceHistory
            value: sum(case when type = 'charge' then 1 else 0 end)

# refund_count
        - tablefeature: 
            name: refund_count
            ref: inputs/stripeBalanceHistory
            value: sum(case when type = 'refund' then 1 else 0 end)

# total_failed_charge_amount
        - tablefeature: 
            name: total_failed_charge_amount
            ref: inputs/stripeCharges
            filter: status = 'failed'
            value: sum(amount)

# total_failed_charge_count
        - tablefeature: 
            name: total_failed_charge_count 
            ref: inputs/stripeCharges
            value: sum(case when status = 'failed' then 1 else 0 end)
 

# Sales in past n days for n = 365
        - tablefeature:
            name: sales_in_past_365_days
            ref: inputs/stripeBalanceHistory
            filter: "{{ macro_datediff('created') }} <= 365"
            value: sum(case when type = 'charge' then amount else 0 end)

# Refund in past n days for n = 365
        - tablefeature:
            name: refund_in_past_365_days
            ref: inputs/stripeBalanceHistory
            filter: "{{ macro_datediff('created') }} <= 365"
            value: sum(case when type = 'refund' then amount else 0 end)

# Fees in past n days for n = 365
        - tablefeature:
            name: fees_in_past_365_days
            ref: inputs/stripeBalanceHistory
            filter: "{{ macro_datediff('created') }} <= 365"
            value: sum(fee)

# Amount spent in past n days for n = 365
        - tablefeature:
            name: amt_spent_in_past_365_days
            ref: inputs/stripeBalanceHistory
            filter: "{{ macro_datediff('created') }} <= 365"
            value: sum(amount)

# Average transaction value in past n days for n = 365
        - tablefeature:
            name: average_transaction_value_in_past_365_days
            ref: inputs/stripeBalanceHistory
            filter: "{{ macro_datediff('created') }} <= 365"
            value: avg(amount)

# Highest transaction value in past n days for n = 365
        - tablefeature:
            name: highest_transaction_value_in_past_365_days
            ref: inputs/stripeBalanceHistory
            filter: "{{ macro_datediff('created') }} <= 365"
            value: max(amount)

# Net transaction amount in past n days for n = 365
        - tablefeature:
            name: net_transaction_amount_in_past_365_days
            ref: inputs/stripeBalanceHistory
            filter: "{{ macro_datediff('created') }} <= 365"
            value: sum(net)

# Transactions in past n days for n = 365
        - tablefeature:
            name: transactions_in_past_365_days
            ref: inputs/stripeBalanceHistory
            filter: "{{ macro_datediff('created') }} <= 365"
            value: sum(case when type = 'charge' then 1 else 0 end)

# Refund count in past n days for n = 365
        - tablefeature:
            name: refund_count_in_past_365_days
            ref: inputs/stripeBalanceHistory
            filter: "{{ macro_datediff('created') }} <= 365"
            value: sum(case when type = 'refund' then 1 else 0 end)

# n_subscriptions_total
        - tablefeature:
            name: n_subscriptions_total
            ref: inputs/stripeInvoicesView
            value: count( distinct subscriptions_id)

# n_plans_total
        - tablefeature:
            name: n_plans_total
            ref: inputs/stripeInvoicesView
            value: count( distinct plan_id)

# n_paid_intervals
        - tablefeature:
            name: n_paid_intervals
            ref: inputs/stripeInvoicesView
            filter: charges_created_timestamp is not null or charges_created_timestamp < to_timestamp_tz(replace('{{timestamp}}',' UTC'))
            value: count( distinct invoices_id)

# n_max_renewals
        - inputvar:
            name: subscriptions_renewal_count
            ref: inputs/stripeInvoicesView
            value: sum(case when charges_amount > 0 then 1 else 0 end)
            window:
                partition_by: 
                  - subscriptions_id  
        - tablefeature:
            name: n_max_renewals
            ref: inputs/stripeInvoicesView
            value: case when max(subscriptions_renewal_count) = 0 then null else max(subscriptions_renewal_count) - 1 end

# distinct_plans_subscribed
        - tablefeature:
            name: distinct_plans_subscribed
            ref: inputs/stripeInvoicesView
            value: array_agg(distinct plan_id)

# current_amount_due_subscriptions
        - tablefeature:
            name: current_amount_due_subscriptions
            ref: inputs/stripeInvoicesView
            filter: (charges_created_timestamp is null or charges_created_timestamp > to_timestamp_tz(replace('{{timestamp}}',' UTC'))) and (canceled_at is null or canceled_at > to_timestamp_tz(replace('{{timestamp}}',' UTC'))) and amount_due > 0
            value: sum(amount_due)

# amt_spent_subscriptions
        - tablefeature:
            name: amt_spent_subscriptions
            ref: inputs/stripeInvoicesView
            filter: invoices_id is not null
            value: sum(charges_amount) - sum(case when refund_amount is not null then refund_amount else 0 end)

# days_since_first_subscription
        - tablevar: 
            name: first_subscription_time
            ref: inputs/stripeInvoicesView
            filter: invoices_id is not null and (canceled_at is null or canceled_at > to_timestamp_tz(replace('{{timestamp}}',' UTC')))
            value: min(charges_created_timestamp)
        - feature:
            name: days_since_first_subscription
            value: "{{ macro_datediff('first_subscription_time') }}"

# total_active_subscriptions
        - tablefeature: 
            name: total_active_subscriptions
            ref: inputs/stripeInvoicesView
            filter: charges_amount > 0 and (canceled_at is null or canceled_at > to_timestamp_tz(replace('{{timestamp}}',' UTC')))
            value: count( distinct subscriptions_id)

# total_active_plans
        - tablefeature: 
            name: total_active_plans
            ref: inputs/stripeInvoicesView
            filter: charges_amount > 0 and (canceled_at is null or canceled_at > to_timestamp_tz(replace('{{timestamp}}',' UTC')))
            value: count( distinct plan_id)

# active_plan_intervals
        - tablefeature: 
            name: active_plan_intervals
            ref: inputs/stripeInvoicesView
            filter: charges_amount > 0 and (canceled_at is null or canceled_at > to_timestamp_tz(replace('{{timestamp}}',' UTC')))
            value: array_agg(plan_interval)

# total_active_plan_amount
        - tablefeature: 
            name: total_active_plan_amount
            ref: inputs/stripeInvoicesView
            filter: charges_amount > 0 and (canceled_at is null or canceled_at > to_timestamp_tz(replace('{{timestamp}}',' UTC')))
            value: sum(plan_amount)